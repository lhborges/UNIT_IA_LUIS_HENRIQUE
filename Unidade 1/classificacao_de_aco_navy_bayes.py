# -*- coding: utf-8 -*-
"""Classificacao de aco Navy Bayes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ABNTCtfJLKCnk9NqPUTFry6Tkm6_Bltm
"""

#NAIVE BAYES


import pandas as pd
from sklearn.model_selection import train_test_split #Divide a base em treino e teste
from sklearn.naive_bayes import GaussianNB # Naive Bayes
from sklearn.preprocessing import LabelEncoder

Arquivo = pd.read_csv('aco.csv') #Arquivo usado para analise (treino e teste)
previsores = Arquivo.iloc[:,0:4].values #Seleciona os atributos previsores
classe = Arquivo.iloc[:,3].values #Seleciona o atributo classificador

labelencoder = LabelEncoder() #Prepara os atributos para analise (todos os que não forem numericos) altera os atributos categoricos em numericos
previsores[:, 0] = labelencoder.fit_transform(previsores[:, 0])
previsores[:, 1] = labelencoder.fit_transform(previsores[:, 1])
previsores[:, 2] = labelencoder.fit_transform(previsores[:, 2])
previsores[:, 3] = labelencoder.fit_transform(previsores[:, 3])

X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(previsores,
                                                                  classe,
                                                                  test_size = 0.3,
                                                                  random_state = 0) #DIvide a base em teste e treinamento. Deixando a base de treinamento com 30% do tamanho, rando sempre divide a base da mesma forma

naive_bayes = GaussianNB() #Cria o classificador
naive_bayes.fit(X_treinamento, y_treinamento) #Usa os dados para classificação

previsoes = naive_bayes.predict(X_teste) # Faz as previsões
print(previsoes)
confusao = confusion_matrix(y_teste, previsoes) #Cria matriz de confusão
print(confusao)
taxa_acerto = accuracy_score(y_teste, previsoes) # Teste de acuracia
print(taxa_acerto)
taxa_erro = 1 - taxa_acerto
print(taxa_erro)
from yellowbrick.classifier import ConfusionMatrix #Biblioteca específica para visualização da matriz de confusão
v = ConfusionMatrix(GaussianNB()) #Cria o visualizador
v.fit(X_treinamento, y_treinamento) #Fazendo o treinamento
v.score(X_teste, y_teste) #Fazendo o score
v.poof() #Cria visualizador