# -*- coding: utf-8 -*-
"""Classificacao de aco Arvore

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tn0UHfC8RbNdAiLvs-UgtnuZM7qmP24
"""

#ARVORE


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.tree import DecisionTreeClassifier
import graphviz
from sklearn.tree import export_graphviz

Arquivo = pd.read_csv('aco.csv')
previsores = Arquivo.iloc[:,0:4].values
classe = Arquivo.iloc[:,3].values

labelencoder = LabelEncoder() #Prepara os atributos para analise (todos os que não forem numericos) altera os atributos categoricos em numericos
previsores[:, 0] = labelencoder.fit_transform(previsores[:, 0])
previsores[:, 1] = labelencoder.fit_transform(previsores[:, 1])
previsores[:, 2] = labelencoder.fit_transform(previsores[:, 2])
previsores[:, 3] = labelencoder.fit_transform(previsores[:, 3])


X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(previsores,
                                                                  classe,
                                                                  test_size = 0.3,
                                                                  random_state = 0)

arvore = DecisionTreeClassifier()
arvore.fit(X_treinamento, y_treinamento)

export_graphviz(arvore, out_file = 'tree.dot')

previsoes = arvore.predict(X_teste)
confusao = confusion_matrix(y_teste, previsoes)
taxa_acerto = accuracy_score(y_teste, previsoes)
taxa_erro = 1 - taxa_acerto
print(previsoes)
print(confusao)
print(taxa_acerto)
print(taxa_erro)
from yellowbrick.classifier import ConfusionMatrix #Biblioteca específica para visualização da matriz de confusão
v = ConfusionMatrix(DecisionTreeClassifier()) #Cria o visualizador
v.fit(X_treinamento, y_treinamento) #Fazendo o treinamento
v.score(X_teste, y_teste) #Fazendo o score
v.poof() #Cria visualizador